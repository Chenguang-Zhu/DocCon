AccessControl	_grantRole	RoleGranted	$Bool(True)
AccessControl	_revokeRole	RoleRevoked	$Bool(True)
AccessControlEnumerable	_revokeRole	RoleRevoked	$Bool(True)
AccessControlEnumerable	_grantRole	RoleGranted	$Bool(True)
Address	functionCall	$Cmp($Literal(address(this).balance), $Literal(value), GEQ)
Address	sendValue	$Literal(success)
Address	sendValue	$Cmp($Literal(address(this).balance), $Literal(amount), GEQ)
Address	functionCallWithValue	$Cmp($Literal(address(this).balance), $Literal(value), GEQ)
AddressImpl	functionCallWithValue	CallReturnValue	$Bool(True)
AddressImpl	functionCall	$Cmp($Literal(address(this).balance), $Literal(value), GEQ)
AddressImpl	functionStaticCall	CallReturnValue	$Bool(True)
AddressImpl	functionCallWithValue	$Cmp($Literal(address(this).balance), $Literal(value), GEQ)
AddressImpl	functionDelegateCall	CallReturnValue	$Bool(True)
AddressImpl	sendValue	$Literal(success)
AddressImpl	sendValue	$Cmp($Literal(address(this).balance), $Literal(amount), GEQ)
AddressImpl	functionCall	CallReturnValue	$Bool(True)
Checkpoints	push	$Cmp($Literal(value), $Literal(type()(uint224).max), LEQ)
Checkpoints	push	$Cmp($Literal(value), $Literal(type()(uint32).max), LEQ)
Checkpoints	getAtBlock	$Cmp($Literal(blockNumber), $Literal(block.number), LT)
CheckpointsImpl	push	$Cmp($Literal(value), $Literal(type()(uint32).max), LEQ)
CheckpointsImpl	push	$Cmp($Literal(value), $Literal(type()(uint224).max), LEQ)
CheckpointsImpl	getAtBlock	$Cmp($Literal(blockNumber), $Literal(block.number), LT)
Clones	cloneDeterministic	$Cmp($Literal(instance), $Literal(address(0)), NEQ)
Clones	clone	$Cmp($Literal(instance), $Literal(address(0)), NEQ)
CompTimelock	setDelay	$Cmp($Literal(msg.sender), $Literal(address(this)), EQ)
CompTimelock	setPendingAdmin	NewPendingAdmin	$Bool(True)
CompTimelock	setDelay	$Cmp($Literal(delay_), $Literal(MAXIMUM_DELAY), LEQ)
CompTimelock	executeTransaction	$Cmp($Literal(getBlockTimestamp()), $Math($Literal(eta), $Literal(GRACE_PERIOD), ADD), LEQ)
CompTimelock	constructor	$Cmp($Literal(delay_), $Literal(MINIMUM_DELAY), GEQ)
CompTimelock	executeTransaction	ExecuteTransaction	$Bool(True)
CompTimelock	setDelay	$Cmp($Literal(delay_), $Literal(MINIMUM_DELAY), GEQ)
CompTimelock	setDelay	NewDelay	$Bool(True)
CompTimelock	acceptAdmin	$Cmp($Literal(msg.sender), $Literal(pendingAdmin), EQ)
CompTimelock	queueTransaction	$Cmp($Literal(msg.sender), $Literal(admin), EQ)
CompTimelock	constructor	$Cmp($Literal(delay_), $Literal(MAXIMUM_DELAY), LEQ)
CompTimelock	queueTransaction	$Cmp($Literal(eta), $Math($Literal(getBlockTimestamp()), $Literal(delay), ADD), GEQ)
CompTimelock	executeTransaction	$Cmp($Literal(getBlockTimestamp()), $Literal(eta), GEQ)
CompTimelock	executeTransaction	$Literal(queuedTransactions[txHash])
CompTimelock	cancelTransaction	CancelTransaction	$Bool(True)
CompTimelock	cancelTransaction	$Cmp($Literal(msg.sender), $Literal(admin), EQ)
CompTimelock	queueTransaction	QueueTransaction	$Bool(True)
CompTimelock	executeTransaction	$Cmp($Literal(msg.sender), $Literal(admin), EQ)
CompTimelock	setPendingAdmin	$Cmp($Literal(msg.sender), $Literal(address(this)), EQ)
CompTimelock	acceptAdmin	NewAdmin	$Bool(True)
ConditionalEscrow	withdraw	Withdrawn	$Bool(True)
ConditionalEscrow	withdraw	$Cmp($Literal(address(this).balance), $Literal(amount), GEQ)
ConditionalEscrow	withdraw	$Literal(withdrawalAllowed(payee))
Counters	decrement	$Cmp($Literal(value), $Literal(0), GT)
Create2Impl	deployERC1820Implementer	$Cmp($Literal(address(this).balance), $Literal(amount), GEQ)
Create2Impl	deploy	$Cmp($Literal(address(this).balance), $Literal(amount), GEQ)
EIP712External	verify	$Cmp($Literal(recoveredSigner), $Literal(signer), EQ)
ERC1155	_mintBatch	$Cmp($Literal(to), $Literal(address(0)), NEQ)
ERC1155	_burn	TransferSingle	$Bool(True)
ERC1155	_burnBatch	TransferBatch	$Bool(True)
ERC1155	_burnBatch	$Cmp($Literal(from), $Literal(address(0)), NEQ)
ERC1155Burnable	burn	$Cmp($Literal(from), $Literal(address(0)), NEQ)
ERC1155Burnable	burnBatch	$Cmp($Literal(ids.length), $Literal(amounts.length), EQ)
ERC1155Burnable	burn	TransferSingle	$Bool(True)
ERC1155Burnable	burnBatch	TransferBatch	$Bool(True)
ERC1155Burnable	burnBatch	$Cmp($Literal(from), $Literal(address(0)), NEQ)
ERC1155PresetMinterPauser	unpause	Unpaused	$Bool(True)
ERC1155PresetMinterPauser	pause	Paused	$Bool(True)
ERC721PresetMinterPauserAutoId	pause	Paused	$Bool(True)
ERC721PresetMinterPauserAutoId	unpause	Unpaused	$Bool(True)
ERC1155	_mintBatch	TransferBatch	$Bool(True)
ContextMockCaller	callData	Data	$Bool(True)
ContextMockCaller	callSender	Sender	$Bool(True)
ERC1155	_safeBatchTransferFrom	$Cmp($Literal(to), $Literal(address(0)), NEQ)
ERC1155	_safeBatchTransferFrom	$Cmp($Literal(fromBalance), $Literal(amount), GEQ)
ERC1155	_safeBatchTransferFrom	$Cmp($Literal(ids.length), $Literal(amounts.length), EQ)
ERC1155	_setApprovalForAll	$Cmp($Literal(owner), $Literal(operator), NEQ)
ERC1155Burnable	burn	$Logic($Cmp($Literal(account), $Literal(_msgSender()), EQ), $Literal(isApprovedForAll(account,_msgSender())), OR)
ERC1155Burnable	burnBatch	$Logic($Cmp($Literal(account), $Literal(_msgSender()), EQ), $Literal(isApprovedForAll(account,_msgSender())), OR)
ERC1155PresetMinterPauser	mintBatch	$Literal(hasRole(MINTER_ROLE,_msgSender()))
ERC1155PresetMinterPauser	mintBatch	$Cmp($Literal(ids.length), $Literal(amounts.length), EQ)
ERC1155PresetMinterPauser	mint	$Neg($Literal(paused()))
ERC1155PresetMinterPauser	mintBatch	$Cmp($Literal(to), $Literal(address(0)), NEQ)
ERC1155PresetMinterPauser	mintBatch	TransferBatch	$Bool(True)
ERC1155PresetMinterPauser	mint	TransferSingle	$Bool(True)
ERC1155PresetMinterPauser	mintBatch	$Neg($Literal(paused()))
ERC1967Proxy	constructor	$Literal(Address.isContract(newImplementation))
ERC1967Proxy	constructor	$Literal(isContract(target))
ERC1967Proxy	constructor	$Cmp($Literal(_IMPLEMENTATION_SLOT), $Literal(bytes32(uint256(keccak256(bytes)(eip1967.proxy.implementation)) - 1)), EQ)
ERC1967Proxy	constructor	Upgraded	$Bool(True)
ERC1967Upgrade	_setAdmin	$Cmp($Literal(newAdmin), $Literal(address(0)), NEQ)
ERC1967Upgrade	_upgradeToAndCall	$Literal(isContract(target))
ERC1967Upgrade	_changeAdmin	$Cmp($Literal(newAdmin), $Literal(address(0)), NEQ)
ERC1967Upgrade	_upgradeTo	$Literal(Address.isContract(newImplementation))
ERC1967Upgrade	_upgradeToAndCallUUPS	$Cmp($Literal(slot), $Literal(_IMPLEMENTATION_SLOT), EQ)
ERC1967Upgrade	_setBeacon	$Literal(Address.isContract(IBeacon(newBeacon).implementation()))
ERC1967Upgrade	_upgradeToAndCall	$Literal(Address.isContract(newImplementation))
ERC1967Upgrade	_upgradeBeaconToAndCall	$Literal(isContract(target))
ERC1967Upgrade	_setBeacon	$Literal(Address.isContract(newBeacon))
ERC1967Upgrade	_setImplementation	$Literal(Address.isContract(newImplementation))
ERC1967Upgrade	_upgradeToAndCallUUPS	$Literal(isContract(target))
ERC1967Upgrade	_upgradeToAndCallUUPS	$Literal(Address.isContract(newImplementation))
ERC20	decreaseAllowance	$Cmp($Literal(owner), $Literal(address(0)), NEQ)
ERC20	_spendAllowance	$Cmp($Literal(owner), $Literal(address(0)), NEQ)
ERC20	_spendAllowance	$Cmp($Literal(spender), $Literal(address(0)), NEQ)
ERC20	increaseAllowance	$Cmp($Literal(owner), $Literal(address(0)), NEQ)
ERC20Capped	_mint	$Cmp($Math($Literal(ERC20.totalSupply()), $Literal(amount), ADD), $Literal(cap()), LEQ)
ERC20FlashMint	flashLoan	Transfer	$Bool(True)
ERC20FlashMint	flashLoan	Approval	$Bool(True)
ERC20FlashMint	flashLoan	$Cmp($Literal(receiver.onFlashLoan(msg.sender,token,amount,fee,data)), $Literal(_RETURN_VALUE), EQ)
ERC20FlashMint	flashLoan	$Cmp($Literal(accountBalance), $Literal(amount), GEQ)
ERC20FlashMint	flashLoan	$Cmp($Literal(token), $Literal(address(this)), EQ)
ERC20FlashMint	flashFee	$Cmp($Literal(token), $Literal(address(this)), EQ)
ERC20FlashMint	flashLoan	$Cmp($Literal(spender), $Literal(address(0)), NEQ)
ERC20FlashMint	flashLoan	$Cmp($Literal(owner), $Literal(address(0)), NEQ)
ERC20FlashMint	flashLoan	$Cmp($Literal(amount), $Literal(maxFlashLoan(token)), LEQ)
ERC20FlashMint	flashLoan	$Cmp($Literal(account), $Literal(address(0)), NEQ)
ERC20Permit	permit	$Cmp($Literal(spender), $Literal(address(0)), NEQ)
ERC20Permit	permit	$Cmp($Literal(signer), $Literal(owner), EQ)
ERC20Permit	permit	$Cmp($Literal(block.timestamp), $Literal(deadline), LEQ)
ERC20Permit	permit	$Cmp($Literal(owner), $Literal(address(0)), NEQ)
ERC20Votes	getPastVotes	$Cmp($Literal(blockNumber), $Literal(block.number), LT)
ERC20Votes	delegateBySig	DelegateVotesChanged	$Bool(True)
ERC20Votes	_moveVotingPower	$Cmp($Literal(value), $Literal(type()(uint224).max), LEQ)
ERC20Votes	_moveVotingPower	$Cmp($Literal(value), $Literal(type()(uint32).max), LEQ)
ERC20Votes	_moveVotingPower	DelegateVotesChanged	$Bool(True)
ERC20Votes	delegateBySig	$Cmp($Literal(value), $Literal(type()(uint32).max), LEQ)
ERC20Votes	delegateBySig	$Cmp($Literal(value), $Literal(type()(uint224).max), LEQ)
ERC20Votes	delegateBySig	$Cmp($Literal(nonce), $Literal(_useNonce(signer)), EQ)
ERC20Votes	delegateBySig	$Cmp($Literal(block.timestamp), $Literal(expiry), LEQ)
ERC20Votes	delegateBySig	DelegateChanged	$Bool(True)
ERC20Votes	numCheckpoints	$Cmp($Literal(value), $Literal(type()(uint32).max), LEQ)
ERC20Votes	_delegate	$Cmp($Literal(value), $Literal(type()(uint32).max), LEQ)
ERC20Votes	_delegate	$Cmp($Literal(value), $Literal(type()(uint224).max), LEQ)
ERC20Votes	delegate	DelegateChanged	$Bool(True)
ERC20Votes	delegate	DelegateVotesChanged	$Bool(True)
ERC20Votes	delegate	$Cmp($Literal(value), $Literal(type()(uint224).max), LEQ)
ERC20Votes	delegate	$Cmp($Literal(value), $Literal(type()(uint32).max), LEQ)
ERC20Votes	_writeCheckpoint	$Cmp($Literal(value), $Literal(type()(uint32).max), LEQ)
ERC20Votes	_writeCheckpoint	$Cmp($Literal(value), $Literal(type()(uint224).max), LEQ)
ERC721PresetMinterPauserAutoId	mint	$Cmp($Literal(owner), $Literal(address(0)), NEQ)
ERC721PresetMinterPauserAutoId	mint	$Neg($Literal(paused()))
ERC721PresetMinterPauserAutoId	mint	$Neg($Literal(_exists(tokenId)))
ERC721PresetMinterPauserAutoId	mint	$Cmp($Literal(to), $Literal(address(0)), NEQ)
ERC721Votes	_afterTokenTransfer	$Cmp($Literal(value), $Literal(type()(uint224).max), LEQ)
ERC721Votes	_afterTokenTransfer	$Cmp($Literal(value), $Literal(type()(uint32).max), LEQ)
ERC721Votes	_getVotingUnits	$Cmp($Literal(owner), $Literal(address(0)), NEQ)
GovernorCompatibilityBravo	cancel	$Logic($Logic($Cmp($Literal(status), $Literal(ProposalState.Canceled), NEQ), $Cmp($Literal(status), $Literal(ProposalState.Expired), NEQ), AND), $Cmp($Literal(status), $Literal(ProposalState.Executed), NEQ), AND)
GovernorCompatibilityBravo	cancel	ProposalCanceled	$Bool(True)
GovernorCompatibilityBravo	_countVote	$Neg($Literal(receipt.hasVoted))
GovernorCompatibilityBravo	cancel	$Logic($Cmp($Literal(_msgSender()), $Literal(details.proposer), EQ), $Cmp($Literal(getVotes(details.proposer,block.number - 1)), $Literal(proposalThreshold()), LT), OR)
GovernorCompatibilityBravo	_countVote	$Cmp($Literal(value), $Literal(type()(uint96).max), LEQ)
GovernorPreventLateQuorum	_castVote	$Cmp($Literal(value), $Literal(type()(uint64).max), LEQ)
GovernorPreventLateQuorum	_castVote	$Cmp($Literal(state(proposalId)), $Literal(ProposalState.Active), EQ)
GovernorTimelockCompound	queue	$Cmp($Literal(value), $Literal(type()(uint64).max), LEQ)
GovernorTimelockCompound	_execute	$Literal(success)
GovernorTimelockCompound	_cancel	ProposalCanceled	$Bool(True)
GovernorTimelockCompound	_cancel	$Logic($Logic($Cmp($Literal(status), $Literal(ProposalState.Canceled), NEQ), $Cmp($Literal(status), $Literal(ProposalState.Expired), NEQ), AND), $Cmp($Literal(status), $Literal(ProposalState.Executed), NEQ), AND)
GovernorTimelockCompound	_updateTimelock	TimelockChange	$Bool(True)
GovernorTimelockCompound	_execute	$Cmp($Literal(address(this).balance), $Literal(amount), GEQ)
GovernorTimelockCompound	_execute	$Cmp($Literal(eta), $Literal(0), GT)
GovernorTimelockCompound	updateTimelock	TimelockChange	$Bool(True)
GovernorTimelockCompound	queue	$Cmp($Literal(state(proposalId)), $Literal(ProposalState.Succeeded), EQ)
GovernorTimelockCompound	queue	ProposalQueued	$Bool(True)
GovernorTimelockCompound	queue	$Neg($Literal(_timelock.queuedTransactions(keccak256(bytes)(abi.encode(targets[i],values[i],,calldatas[i],eta)))))
RefundEscrow	enableRefunds	$Cmp($Literal(state()), $Literal(State.Active), EQ)
RefundEscrow	beneficiaryWithdraw	$Cmp($Literal(address(this).balance), $Literal(amount), GEQ)
RefundEscrow	close	$Cmp($Literal(state()), $Literal(State.Active), EQ)
RefundEscrow	beneficiaryWithdraw	$Literal(success)
RefundEscrow	beneficiaryWithdraw	$Cmp($Literal(state()), $Literal(State.Closed), EQ)
