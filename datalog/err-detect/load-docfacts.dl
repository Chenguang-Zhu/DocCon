/** Copyright 2022 wuxhme (at) gmail.com 
Load doc facts 
 */
#pragma once 
#include "../def.dl"

/* Inherit and Override */
.decl D_Inherit(ca: Ct, cb: Ct) /* Contract ca inherits contract cb */
.input D_Inherit(IO=file, filename="docfacts/Inherit.facts")

.decl D_Override(ca: Ct, fa: Fn, cb: Ct, fb: Fn) /* Function fa overrides function fb */
.input D_Override(IO=file, filename="docfacts/Override.facts")

/* Contract related */
.decl D_HasStateVar(c: Ct, v: SVar)  /* Contract c has a state variable v */
.input D_HasStateVar(IO=file, filename="docfacts/HasStateVar.facts")

.decl D_HasFn(c:Ct, f: Fn)  /* Contract c has a function f */
.input D_HasFn(IO=file, filename="docfacts/HasFn.facts")

.decl D_CtHasMod(c:Ct, m: Mod) /* Contract c has a modifer m */
.input D_CtHasMod(IO=file, filename="docfacts/CtHasMod.facts")

/* Function related */
.decl D_HasParam(c: Ct, f: Fn, p: Param) /* Function f has a parameter p */
.input D_HasParam(IO=file, filename="docfacts/HasParam.facts")

.decl D_FnHasMod(c: Ct, f: Fn, m: Mod) /* Function f uses a modifier m */
.input D_FnHasMod(IO=file, filename="docfacts/FnHasMod.facts")


/* Relations between entities */

.decl D_Call(ca: Ct, fa: Fn, vl: ExprList, cb: Ct, fb: Fn, pl: VarList)
.input D_Call(IO=file, filename="docfacts/Call.facts")

.decl D_Require(c: Ct, f: Fn, e: Expr) 
.input D_Require(IO=file, filename="docfacts/Require.facts")

.decl D_Revert(c: Ct, f: Fn, x: Expr)
.input D_Revert(IO=file, filename="docfacts/Revert.facts")

.decl D_Emit(c: Ct, f: Fn, ev: Event, e: Expr) 
.input D_Emit(IO=file, filename="docfacts/Emit.facts")

.decl D_SeeFn(ca: Ct, fa: Fn, cb: Ct, fb: Fn) /* see description in documentation */
.input D_SeeFn(IO=file, filename="docfacts/SeeFn.facts")
